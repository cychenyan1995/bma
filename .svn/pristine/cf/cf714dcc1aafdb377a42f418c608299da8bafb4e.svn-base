{"version":3,"sources":["src/services/salesTask.js","src/pages/salesTask/models/salesTask.js"],"names":["_qs","__webpack_require__","_request","_interopRequireDefault","queryTaskList","_callee","params","_regenerator","default","wrap","_context","prev","next","abrupt","stringify","stop","this","updateTask","_callee2","_context2","method","body","_objectSpread2","importTask","_callee3","_context3","upload","sendMessage","_callee4","_context4","_salesTask","_index","namespace","state","list","total","filters","effects","fetchTaskList","mark","_ref","_ref2","payload","call","put","response","sent","type","fetchUpdateTask","_ref3","_ref4","fetchSendMessage","_ref5","_ref6","fetchImportTask","_ref7","_ref8","reducers","getTaskList","action","code","pageTotal","data","notification","error","message","description","getUpdateTask","getSendMessage","getImportTask"],"mappings":"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","file":"3.async.js","sourcesContent":["import { stringify } from 'qs';\nimport request from '@/utils/request';\n\nexport async function queryTaskList(params){\n  return request(`/salesTask/getSalesTaskList?${stringify(params)}`)\n}\n\nexport async function updateTask(params){\n  return request('/salesTask/updateTask',{\n    method: 'POST',\n    body: {\n      ...params\n    }\n  })\n}\n\nexport async function importTask(params){\n  return request('/salesTask/importSalesTask',{\n    method: 'POST',\n    body: {\n      ...params\n    },\n    upload:true\n  })\n}\n\n\nexport async function sendMessage(params){\n  return request(`/salesTask/sendMessage?${stringify(params)}`)\n}\n\n","import { queryTaskList, updateTask, sendMessage, importTask } from '@/services/salesTask';\r\nimport { notification } from \"antd/lib/index\";\r\n\r\nexport default {\r\n  namespace: 'salesTask',\r\n  state: {\r\n    list: [],\r\n    total: 0,\r\n    filters: {}\r\n  },\r\n\r\n  effects: {\r\n    * fetchTaskList({ payload }, { call, put }) {\r\n      const response = yield call(queryTaskList, payload);\r\n      yield put({\r\n        type: 'getTaskList',\r\n        payload: response\r\n      });\r\n    },\r\n\r\n    * fetchUpdateTask({ payload }, { call, put }) {\r\n      const response = yield call(updateTask, payload);\r\n      yield put({\r\n        type: 'getUpdateTask',\r\n        payload: response\r\n      });\r\n    },\r\n\r\n    * fetchSendMessage({ payload }, { call, put }) {\r\n      const response = yield call(sendMessage, payload);\r\n      yield put({\r\n        type: 'getSendMessage',\r\n        payload: response\r\n      })\r\n    },\r\n    * fetchImportTask({ payload }, { call, put }) {\r\n      const response = yield call(importTask, payload);\r\n      yield put({\r\n        type: 'getImportTask',\r\n        payload: response\r\n      });\r\n    }\r\n  },\r\n  reducers: {\r\n    getTaskList(state, action) {\r\n      if (action.payload.code) {\r\n        if (action.payload.code === 1000) {\r\n          return {\r\n            ...state,\r\n            total: action.payload.pageTotal,\r\n            list: action.payload.data\r\n          }\r\n        }\r\n        notification.error({\r\n          message: action.payload.code,\r\n          description: action.payload.message,\r\n        });\r\n      }\r\n\r\n    },\r\n    getUpdateTask(state, action) {\r\n      if (action.payload.code) {\r\n        if (action.payload.code === 1000) {\r\n          return {\r\n            ...state,\r\n          }\r\n        }\r\n        notification.error({\r\n          message: action.payload.code,\r\n          description: action.payload.message,\r\n        });\r\n      }\r\n    },\r\n\r\n    getSendMessage(state, action) {\r\n      if (action.payload.code) {\r\n        if (action.payload.code === 1000) {\r\n          return {\r\n            ...state,\r\n          }\r\n        }\r\n      }\r\n\r\n      notification.error({\r\n        message: action.payload.code,\r\n        description: action.payload.message,\r\n      })\r\n    },\r\n\r\n    getImportTask(state, action) {\r\n      if (action.payload.code) {\r\n        if (action.payload.code === 1000) {\r\n          return {\r\n            ...state,\r\n          }\r\n        }\r\n        notification.error({\r\n          message: action.payload.code,\r\n          description: action.payload.message,\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\n"],"sourceRoot":""}